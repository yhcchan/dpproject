wt <- mtcars$wt
mpg <- mtcars$mpg
fit <- lm(mpg ~ wt)
fit
summary(fit)
resid(fit)
fit$coefficients
fit$fitted.values
fit$model
qplot(fit$model)
plot(fit$model)
abline(lm(mpg ~ wt))
predict(fit, newdata <- newx)
newdata
resid(fit)
sum(resid(fit))
abline(fit, lwd = 2)
plot(fit$model)
abline(fit, lwd = 2)
abline(fit$model, lwd = 2)
?se
?e
?resid
summary(fit)
plot(mpg, wt)
abline(fit, lwd = 2)
fit
plot(wt, mpg)
abline(fit, lwd = 2)
f <- abline(fit, lwd = 2)
f
predict(fit, newdata = 3, inference = ("Prediction"))
predict(fit, newdata = 3, inference = ("Prediction"), se.fit = TRUE)
c <- predict(fit, newdata = 3, inference = ("Prediction"))
plot(c)
plot(wt, c)
newx.x <- data.frame(wt = 3)
c <- predict(fit, newdata = new.x, inference = ("Prediction"))
c <- predict(fit, newdata = newx.x, inference = ("Prediction"))
c
c <- predict(fit, newdata = newx.x, intercal = ("Prediction"))
predict(fit, newdata = newx.x, interval = ("Prediction"))
predict(fit, newdata = newx.x, interval = ("prediction"))
newx.x <- data.frame(wt = 2)
predict(fit, newdata = newx.x, interval = ("confidence"))
confint(fit, 0.95)
confint(fit, level = 0.95)
wts <- wt/2
lm(mpg ~ wts)
fit2 <- lm(mpg ~ wts)
confint(fit2, level = 0.95)
summary(mpg)
sd(mpg)
var(mpg)
fit
summary(fit)
wtx <- wt + 2
lm(mpg ~ wtx)
lm(mpg ~ wt)
47.974 - 37.285
/5.344
10.689/5.344
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y ~ x)
fot <- lm(y ~ x)
summary(fot)
?scale
?MASS
download.packages(MASS)
download.packages(MASS)
install.packages("MASS")
install.packages("MASS")
?shuttle
library(mass)
library(MASS)
?shuttle
shuttle
f <- glm(View(shuttle)$)
View(shuttle)
f <- glm(shuttle$use ~ shuttle$wind)
f <- glm(shuttle$use ~ shuttle$wind,family = "binomial")
f
summary(f)
f <- glm(shuttle$use ~ shuttle$wind + shuttle$magn,family = "binomial")
f
summary(f)
e^(-0.031)
2.718281^(-0.031)
2.718281^(-3.201e-02)
f
summary(f)$coef
2.7182818285^-0.0320087
f <- glm(I(1-shuttle$use) ~ shuttle$wind + shuttle$magn,family = "binomial")
f <- glm(1-shuttle$use ~ shuttle$wind + shuttle$magn,family = "binomial")
shuttle$inverse <- 1-shuttle$use
shuttle$inverse <- 1 - shuttle$use
shuttle$inverse <- 1 - as.numeric(shuttle$use)
class(shuttle$inverse)
shuttle$inverse <- as.factor(shuttle$inverse)
f <- glm(shuttle$inverse ~ shuttle$wind + shuttle$magn,family = "binomial")
f
summary(f)
InsectSprays
g <- glm(InsectSprays$count ~ InsectSprays$spray, formula = "poisson")
g <- glm(InsectSprays$count ~ InsectSprays$spray, model = "poisson")
f <- glm(I(1-shuttle$use) ~ shuttle$wind + shuttle$magn,family = "binomial")
g <- glm(InsectSprays$count ~ InsectSprays$spray, family = "poisson")
g
summary(g)
2.718281828^0.05588
1/1.057471
exp(0.05588)
Insect Sprays
InsectSprays
?gaDAya
?gaDAta
??gaData
InsectSprays$rate <- InsectSprays$count/3.4
g <- glm(InsectSprays$count ~ InsectSprays$spray, family = "poisson", offset = log(InsectSprays$rate + 1))
g
summary(g)
g <- glm(InsectSprays$count ~ InsectSprays$spray, family = "poisson", offset = log(InsectSprays$rate + 1 + log(10)))
summary(g)
log(10)
0.024/log(10)
g <- glm(InsectSprays$count ~ InsectSprays$spray, family = "poisson", offset = (log(InsectSprays$rate + 1) + log(10)))
summary(g)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x1 <- 1:5
y1 <- c(0.93, 2.05, 2.54, 3.87, 4.97)
summary(lm(y ~x))
summary(lm(x ~ y))
summary(lm(y1 ~x1))
summary(lm(x1 ~y1))
x
y
x1 <- 0:5
y1 <- c(0.08 0.93 2.05 2.54 3.87 4.97)
y1 <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
summary(lm(y1 ~ x1))
summary(lm(x1 ~ y1))
knots <- 0
splineterms <- sapply(knots, function(knot) (x > knot) * (x - knot)^2)
xMat <- cbind(1, x, x^2, splineTerms)
xMat <- cbind(1, x, x^2, splineterms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd - 2)
lines(x, yhat, col = "red", lwd = 2)
yhat
lm(y ~ xMat - 1)
summary(lm(y ~ xMat - 1))
yhat
summary(lm(y ~ yhat[which(yhat >= 0)]))
yhat(which(yhat >= 0))
yhat[which(yhat >= 0)]
summary(lm(yhat ~ x[which(x>=0)])
)
summary(lm(yhat[c(7:11)] ~ x[which(x>=0)])
)
summary(lm(yhat[c(7:11)] ~ x[which(x>=0)])
)
yhat[c(7:11)]
summary(lm(yhat[c(6:11)] ~ x[which(x>=0)])
)
InsectSpray
glm(InsectSprays$count ~ InsectSprays$spray, family = poisson)
summary(glm(InsectSprays$count ~ InsectSprays$spray, family = poisson))
exp(0.5588)
1/1.748573
1/0.5588
exp(1.789549)
exp(1/0.05588)
1/0.05588
1/exp(0.05588)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
List(predictors)
Table(predictors)
View(predictors)
?createDataPartition
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
hist(mixtures$Superplasticizer)
hist(mixtures$CompressiveStrength)
hist(log(mixtures$CompressiveStrength)+1)
summary(mixtures$Superplasticizer)
summary(log(mixtures$Superplasticizer)+1)
summary(log(mixtures$Superplasticizer + 1))
hist(log(mixtures$Superplasticizer + 1))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
grep(pattern = "IL*", x = row.names(training))
grep(pattern = "IL^", x = row.names(training))
grep(pattern = "^IL", x = row.names(training))
row.names("training")
grep(pattern = "IL^", x = colnames(training))
grep(pattern = "IL^", x = colnames(training))
colnames(training)
grep(pattern = "^IL", x = colnames(training))
f <- training[,  grep(pattern = "^IL", x = colnames(training))]
View(f)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer+1))
hist(mixtures$Superplasticizer)
summary(log(mixtures$Superplasticizer + 1)))
summary(log(mixtures$Superplasticizer + 1))
summary(mixtures$Superplasticizer)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
hist(log10(mixtures$Superplasticizer+1))
summary(log10(mixtures$Superplasticizer+1))
summary(mixtures$Superplasticizer)
prComp(f)
prcomp(f)
summary(prcomp(f))
x<-preProcess(f, method = "pca", pcaComp = 12)
x
summary(x)
variance(x)
var(x)
poon <- predict(x, f)
plot(poon[,1], poon[,2], col=typeColor)
plot(poon[,1], poon[,2])
x
plot(x)
View(x)
poon
Var(poon)
var(poon)
summary(poon)
table(poon)
tab(poob)
x <- preProcess(f, method = "pca", thresh = 0.9)
x
x <- preProcess(f, method = "pca", thresh = 0.8)
y <- preProcess(f, method = "pca")
model1 <- predict(x, f)
modelfit1 <- train(f ~., method="glm", data=model1)
modelfit1 <- train(f~., method="glm", data=model1)
modelfit1 <- train(f, method="glm", data=model1)
adData
head(adData)
f$diagnosis <- training$diagnosis
f
head(f)
x <- preProcess(f, method = "pca", thresh = 0.8)
head(f)
head(f[,12])
head(f[,13])
x <- preProcess(f[,-13], method = "pca", thresh = 0.8)
trainPC <- predict(x, f[,-13])
modelFit1 <- train(f$diagnosis ~., method="glm", data = trainPC)
modelFit1 <- train(f$diagnosis~., method="glm", data = trainPC)
modelFit1 <- train(f$diagnosis~., method="glm", data = trainPC)
head(f)
trainPC
f
preProc1 <- preProcess(f[,-13], method="pca", thresh = 0.8)
preProc1
PC1 <- predict(preProc1, f[,-13])
PC1
plot(PC1[,1], PC1[,2])
preProc1 <- predict(PC1, f[,-13])
test1 <- predict(preProc1, f[,-13])
PC1 <- predict(preProc1, f[,-13])
modelFit1 <- train(f$diagnosis~., method="glm", data = PC1)
install.packages("e1071")
modelFit1 <- train(f$diagnosis~., method="glm", data = PC1)
confusionMatrix(f$diagnosis)
ftest <- testing[,grep("IL^", testing)]
ftest <- testing[,grep("^IL", testing)]
ftest <- testing[,grep("^IL", colnames(testing)]
ftest <- testing[,grep("^IL", colnames(testing))]
ftest$diagnosis <- testing$diagnosis
confusionMatrix(ftest$diagnosis, predict(modelFit1, ftest))
confusionMatrix(ftest$diagnosis, predict(modelFit1, test1))
test1 <- predict(PC1, ftest[,-13])
test1 <- predict(preProc1, ftest[,-13])
confusionMatrix(ftest$diagnosis, predict(modelFit1, test1))
modelFit2 <- train(ftest$diagnosis~., method="glm", data=ftest[,-13])
modelFit2 <- train(f$diagnosis~., method="glm", data=f[,-13])
confusionMatrix(ftest$diagnosis, modelFit2)
confusionMatrix(ftest$diagnosis, predict(modelFit2, ftest))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
set.seed(325)
svm.model <- svm(CompressiveStrength~., data = training)
svm.pred <- predict(svm.model, testing)
svm.pred
comfusionMatrix(testing$CompressiveStrength, svm.pred)
confusionMatrix(testing$CompressiveStrength, svm.pred)
head(svm.pred)
length(svm.pred)
length(testing$CompressiveStrength)
class(svm.pred)
class(testing$CompressiveStrength)
?confusionMatrix
table(svm.pred, testing$CompressiveStrength)
rmse(svm.pred, testing$CompressiveStrength)
install.packages("hydroGOF")
library(hydroGOF)
rmse(svm.pred, testing$CompressiveStrength)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
diag.rf <- train(diagnosis, method = "rf", data = training)
diag.rf <- train(diagnosis~., method = "rf", data = training)
diag.gbm <- train(diagnosis, method = "gbm", data = training)
diag.gbm <- train(diagnosis~., method = "gbm", data = training)
diag.lda <- train(diagnosis~., method = "lda", data = training)
pred.rf <- predict(diag.rf, testing)
pred.gbm <- predict(diag.gbm, testing)
pred.lda <- predict(diag.lda, testing)
predstack <- data.frame(pred.rf, pred.gbm, pred.lda, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis~., method = "rf", predstack)
combPred <- predict(combModFit, predstack)
combPred
confusionMatrix(combPred, testing$diagnosis)
confusionMatrix(pred.rf, testing$diagnosis)
confusionMatrix(pred.gbm, testing$diagnosis)
confusionMatrix(pred.lda, testing$diagnosis)
set.seed(62433)
predstack <- data.frame(pred.rf, pred.gbm, pred.lda, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis~., method = "rf", predstack)
combPred <- predict(combModFit, predstack)
confusionMatrix(combPred, testing$diagnosis)
install.packages("shiny")
install.packages("manipulate")
install.packages("rchart")
install.packages("rCharts")
install.packages("rChart")
install.packages("rCharts")
require(devtools)
install.packages("devtools")
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(galton)
?data.frame
?table
?colname
?colnames
cbind(1, 1:5)
?names
names(iris)
runApp()
library(shiny)
runApp()
setwd(dir = "~/Documents/R Programming Working Directory//Data Products Course Project")
runApp()
d <- data.frame()
colnames(d) <- c("w", "c", "y")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?xtable
x <- data.frame(x = num(0))
x <- data.frame(x = numeric(0))
x
View(x)
x <- data.frame(jinglebop = numeric(0))
View(x)
runApp()
t <- data.frame(Sepal.Length = numeric(0),
Sepal.Width = numeric(0),
Petal.Length = numeric(0),
Petal.Width = numeric(0))
runApp()
View(t)
t <- data.frame("Sepal.Length" = numeric(0),
Sepal.Width = numeric(0),
Petal.Length = numeric(0),
Petal.Width = numeric(0))
t
colnames(t)
m <- rbind(t, c(1,2,3,4))
m
?paste
runApp()
runApp()
runApp()
runApp()
t <- data.frame(Sepal.Length = double(0),
Sepal.Width = double(0),
Petal.Length = double(0),
Petal.Width = double(0))
t
class(t)
levels(t)
t
summary()
summary(t
)
t[1,] <- c(1,2,3,4)
t
runApp()
runApp()
runApp()
runApp()
runApp()
predict(modelfit, c(1,2,3,4))
modelfit <- train(Species~., data = iris, method = "rpart")
predict(modelfit, c(1,2,3,4))
predict(modelfit, c(1,2,3,4))
t <- data.frame(Sepal.Length = double(0),
Sepal.Width = double(0),
Petal.Length = double(0),
Petal.Width = double(0))
t[1,] <- c(input$s.length, input$s.width, input$p.length, input$p.width)
t[1,] <- c(4,4,4,1)
t
predict(modelfit, t)
?renderText
runApp()
runApp()
runApp()
predict(modelfit, iris)
s <- predict(modelfit, iris)
s
class(s)
as.data.frame(s)
runApp()
predict(modelfit, t)[1]
as.character(predict(modelfit, t)[1])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
